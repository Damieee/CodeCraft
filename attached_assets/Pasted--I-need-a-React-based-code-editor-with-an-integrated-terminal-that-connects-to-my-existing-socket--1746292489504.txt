
I need a React-based code editor with an integrated terminal that connects to my existing socket. The backend provides API endpoints and WebSocket connections for managing projects, files, and terminal sessions.
create a button that user click which is the run button, when they click it, use the function to extract the file name and the code. create a project, a terminal, save the file and the code, then run the code, if it is java send javac filename and it if is python send python file name. if the code requires input allow user to put input. that is, allow the terminal to be interactive like a normal terminal. just make it one simple page, just editor and terminal. users should be able to edit code in terminal and when they run, do all the the above and if input is required, allow them to enter input. the page does not need to be beautiful , it is the functionality i need
what we are connection to is a webscoket. no api endpoints at all. the socket below is hosted on ws://3.131.13.46:8000. that is what you schould connect to



here is the socket file.


import asyncio
import logging
import os
import uuid
from typing import Dict, Any, List

import socketio
from aiohttp import web

from project import Project

# ----------------------------------------------------
# Logging
# ----------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger("socketio_server")

# ----------------------------------------------------
# Configuration constants
# ----------------------------------------------------
SESSION_EXPIRY_SECONDS = 60 * 60          # 1 hour
RESTART_INTERVAL_SECONDS = 60 * 60        # 1 hour
PING_TIMEOUT_SECONDS = 300                # 5 minutes
PING_INTERVAL_SECONDS = 25                # 25 seconds


class SocketWrapper:
    """Light wrapper that lets project‑level handlers emit through Socket.IO."""

    def _init_(self, sio: socketio.AsyncServer, sid: str):
        self._sio = sio
        self._sid = sid

    async def emit(self, event: str, data: Any):
        await self._sio.emit(event, data, room=self._sid)


class ProjectServer:
    """Socket.IO WebSocket server that automatically restarts every
    RESTART_INTERVAL_SECONDS seconds (15 min by default).

    The restart is graceful: all projects are disconnected and the underlying
    aiohttp site is shut down before a new server instance is spawned.
    """

    def _init_(self, host: str = "0.0.0.0", port: int = 8000):
        # Host / port
        self.host = host
        self.port = port

        # Runtime members that are initialised at start() time so that they can
        # be safely torn down in stop()
        self._runner: web.AppRunner | None = None
        self._site: web.TCPSite | None = None
        self._cleanup_task: asyncio.Task | None = None

        # Data stores
        self.projects: Dict[str, Project] = {}
        self.sessions: Dict[str, Dict[str, Any]] = {}

        # Socket.IO setup
        self.sio = socketio.AsyncServer(
            async_mode="aiohttp",
            cors_allowed_origins="*",
            ping_timeout=PING_TIMEOUT_SECONDS,
            ping_interval=PING_INTERVAL_SECONDS,
        )
        self.app = web.Application()
        self.sio.attach(self.app)

        # Register event handlers
        self._register_handlers()

    # ---------------------------------------------------------------------
    # Public API – life‑cycle helpers
    # ---------------------------------------------------------------------
    async def start(self) -> None:
        """Start the underlying aiohttp site and the background cleanup task."""
        self._runner = web.AppRunner(self.app)
        await self._runner.setup()
        self._site = web.TCPSite(self._runner, self.host, self.port)
        await self._site.start()
        logger.info("Server started on http://%s:%s", self.host, self.port)

        # Background task that retires idle sessions / projects every minute
        self._cleanup_task = asyncio.create_task(self._cleanup_loop())

    async def stop(self) -> None:
        """Gracefully shut down the server instance."""
        logger.info("Stopping server – preparing for restart…")

        # 1️⃣ Cancel background task
        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass

        # 2️⃣ Disconnect all active Socket.IO clients (non‑blocking best‑effort)
        for sid in list(self.sessions.keys()):
            try:
                await self.sio.disconnect(sid)
            except Exception:
                pass

        # 3️⃣ Tear down projects
        for pid in list(self.projects.keys()):
            await self._close_project(pid)

        # 4️⃣ Shutdown aiohttp site / runner
        if self._runner:
            await self._runner.cleanup()
        logger.info("Server stopped – restart imminent")

    # ---------------------------------------------------------------------
    # Socket.IO helpers
    # ---------------------------------------------------------------------
    def _register_handlers(self) -> None:
        """Define Socket.IO event handlers inside this helper so they capture self."""

        @self.sio.event
        async def connect(sid, environ):
            logger.info("Client connected: %s", sid)
            self.sessions[sid] = {
                "connected_at": asyncio.get_running_loop().time(),
                "project_id": None,
                "active": True,
            }
            await self.sio.emit("connection_established", {"sid": sid}, room=sid)

        @self.sio.event
        async def disconnect(sid):
            logger.info("Client disconnected: %s", sid)
            await self._handle_disconnection(sid)

        @self.sio.event
        async def create_project(sid, data):
            await self._handle_create_project(sid, data)

        @self.sio.event
        async def join_project(sid, data):
            await self._handle_join_project(sid, data)

        @self.sio.event
        async def leave_project(sid, data):
            await self._handle_leave_project(sid)

        @self.sio.event
        async def project_command(sid, data):
            await self._handle_project_command(sid, data)

    # ---------------------------------------------------------------------
    # Event‑handler implementations (factored out for readability)
    # ---------------------------------------------------------------------
    async def _handle_disconnection(self, sid: str):
        session = self.sessions.get(sid)
        if not session:
            return

        project_id = session.get("project_id")
        if project_id:
            still_connected = [
                s
                for s, d in self.sessions.items()
                if s != sid and d.get("project_id") == project_id and d.get("active")
            ]
            if not still_connected:
                logger.info("No more clients for project %s – closing", project_id)
                await self._close_project(project_id)
        # Drop the session record
        self.sessions.pop(sid, None)

    async def _handle_create_project(self, sid: str, data: Dict[str, Any]):
        project_type = data.get("type", "base")
        project_id = data.get("id", str(uuid.uuid4()))
        api_key = data.get("api_key", os.getenv("E2B_API_KEY"))
        logger.info("%s requested project %s (%s)", sid, project_id, project_type)

        if project_id in self.projects:
            self.sessions[sid]["project_id"] = project_id
            await self.sio.emit(
                "project_ready",
                {
                    "project_id": project_id,
                    "status": "ready",
                    "details": self.projects[project_id].get_project_details(),
                },
                room=sid,
            )
            return

        project = Project(project_id, project_type, api_key)

        async def file_watch_callback(files: List[str]):
            recipients = [
                s
                for s, d in self.sessions.items()
                if d.get("project_id") == project_id and d.get("active")
            ]
            for s in recipients:
                await self.sio.emit(
                    "files_changed", {"project_id": project_id, "files": files}, room=s
                )

        await self.sio.emit(
            "project_initializing", {"project_id": project_id, "status": "initializing"}, room=sid
        )

        try:
            if await project.initialize(file_watch_callback=file_watch_callback):
                self.projects[project_id] = project
                self.sessions[sid]["project_id"] = project_id
                await self.sio.emit(
                    "project_ready",
                    {
                        "project_id": project_id,
                        "status": "ready",
                        "details": project.get_project_details(),
                    },
                    room=sid,
                )
            else:
                raise RuntimeError("Failed to initialise project")
        except Exception as exc:
            logger.exception("Initialisation error for project %s", project_id)
            await self.sio.emit(
                "project_error",
                {
                    "project_id": project_id,
                    "error": f"Failed to initialise project: {exc}",
                },
                room=sid,
            )

    async def _handle_join_project(self, sid: str, data: Dict[str, Any]):
        project_id = data.get("project_id")
        if not project_id or project_id not in self.projects:
            await self.sio.emit("error", {"message": f"Project {project_id!r} not found"}, room=sid)
            return
        self.sessions[sid]["project_id"] = project_id
        await self.sio.emit(
            "project_ready",
            {
                "project_id": project_id,
                "status": "ready",
                "details": self.projects[project_id].get_project_details(),
            },
            room=sid,
        )

    async def _handle_leave_project(self, sid: str):
        sess = self.sessions.get(sid)
        if not sess:
            return
        project_id = sess.pop("project_id", None)
        if not project_id:
            return
        others = [
            s
            for s, d in self.sessions.items()
            if s != sid and d.get("project_id") == project_id and d.get("active")
        ]
        if not others and project_id in self.projects:
            logger.info("Last client left project %s – closing", project_id)
            await self._close_project(project_id)
        await self.sio.emit("project_left", {"project_id": project_id}, room=sid)

    async def _handle_project_command(self, sid: str, data: Dict[str, Any]):
        sess = self.sessions.get(sid)
        if not sess:
            await self.sio.emit("error", {"message": "Invalid session"}, room=sid)
            return
        project_id = sess.get("project_id")
        if not project_id or project_id not in self.projects:
            await self.sio.emit("error", {"message": "No active project"}, room=sid)
            return
        command = data.get("command")
        args = data.get("args", {})
        if not command:
            await self.sio.emit("error", {"message": "Command is required"}, room=sid)
            return
        project = self.projects[project_id]
        handlers = project.handlers({"socket": SocketWrapper(self.sio, sid)})
        handler = handlers.get(command)
        if not handler:
            await self.sio.emit("error", {"message": f"Unknown command: {command}"}, room=sid)
            return
        try:
            result = await handler(args)
            await self.sio.emit(
                "command_result", {"command": command, "args": args, "result": result}, room=sid
            )
        except Exception as exc:
            logger.exception("Command %s failed", command)
            await self.sio.emit(
                "error", {"command": command, "message": f"Error executing command: {exc}"}, room=sid
            )

    # ---------------------------------------------------------------------
    # Internal helpers
    # ---------------------------------------------------------------------
    async def _close_project(self, project_id: str):
        project = self.projects.pop(project_id, None)
        if not project:
            return
        try:
            await project.disconnect()
            logger.info("Closed project %s", project_id)
        except Exception:
            logger.exception("Error closing project %s", project_id)

    async def _cleanup_loop(self):
        while True:
            try:
                now = asyncio.get_running_loop().time()
                # Expire sessions
                for sid, data in list(self.sessions.items()):
                    if data.get("active") and now - data["connected_at"] > SESSION_EXPIRY_SECONDS:
                        logger.info("Expiring idle session %s", sid)
                        data["active"] = False
                        try:
                            await self.sio.disconnect(sid)
                        except Exception:
                            pass
                # Close idle projects (no active sessions)
                for pid, project in list(self.projects.items()):
                    if not any(
                        sdata.get("project_id") == pid and sdata.get("active")
                        for sdata in self.sessions.values()
                    ):
                        logger.info("Project %s is idle – closing", pid)
                        await self._close_project(pid)
            except Exception:
                logger.exception("Cleanup loop error")
            await asyncio.sleep(60)


# =====================================================
# Entry‑point with automatic restart every 15‑minutes
# =====================================================
async def _run_single_cycle():
    """Spawn one ProjectServer instance and keep it alive for the configured
    restart interval. When the time elapses the instance is shut down and the
    coroutine returns so that the outer loop can spin up a fresh server.
    """
    server = ProjectServer()
    await server.start()
    try:
        await asyncio.sleep(RESTART_INTERVAL_SECONDS)
    finally:
        await server.stop()


async def main() -> None:
    """Main entry‑point – keeps launching fresh server instances forever."""
    while True:
        await _run_single_cycle()


if _name_ == "_main_":
    asyncio.run(main())





here is the project file the socket is connecting to






import asyncio
import json
import re
import time
from typing import Dict, Any, Optional, Callable, List, Union, Tuple
import os
import logging
from e2b import AsyncSandbox

from terminal_manager import TerminalManager
from file_manager import FileManager

# Configure logging
logger = logging.getLogger("project")

# Constants
CONTAINER_PAUSE = 300000  # 5 minutes in milliseconds
CONTAINER_TIMEOUT = 3600000  # 10 minutes in milliseconds
MAX_TERMINALS = 10  # Maximum number of terminals per project
DEFAULT_PROJECT_DIR = "/home/user/project"

class LockManager:
    """Manages locks for exclusive access to resources"""
    def _init_(self):
        self.locks = {}
        
    async def acquire_lock(self, key: str, callback: Callable):
        """Acquire a lock for the given key and execute the callback"""
        if key not in self.locks:
            self.locks[key] = asyncio.Lock()
            
        async with self.locks[key]:
            return await callback()

# Global lock manager
lock_manager = LockManager()

def extract_port_number(input_string: str) -> Optional[int]:
    """Extract port number from a string containing 'http://localhost:<port>'"""
    # Remove ANSI color codes
    cleaned_string = re.sub(r'\x1B\[[0-9;]*m', '', input_string)
    match = re.search(r'http://localhost:(\d+)', cleaned_string)
    return int(match.group(1)) if match else None

class Project:
    """Manages a project environment with terminals, files, and containers"""
    
    def _init_(self, project_id: str, project_type: str = "base", 
                 api_key: str = None):
        # Project properties
        self.project_id = project_id
        self.type = project_type
        self.file_manager = None
        self.terminal_manager = None
        self.sandbox = None
        self.api_key = api_key or os.environ.get("E2B_API_KEY", "e2b_25759fe29f1d0ab6ecb00f615f0dec122c70b6fa")
        self.pause_timeout = None
        self.status = "initializing"
        self.created_at = time.time()
        self.last_activity = time.time()
        self.active_terminals = set()
        self.is_closing = False
        
    async def initialize(self, file_watch_callback: Optional[Callable] = None):
        """Initialize the project with terminal and file managers"""
        try:
            logger.info(f"Initializing project {self.project_id} of type {self.type}")
            self.status = "initializing"
            
            # Initialize terminal manager
            self.terminal_manager = TerminalManager()
            
            # Initialize the sandbox through the terminal manager
            await self.terminal_manager.initialize_sandbox(
                template=self.type,
                api_key=self.api_key
            )
            
            # Get the sandbox instance
            self.sandbox = self.terminal_manager.get_sandbox()
            if not self.sandbox:
                logger.error(f"Failed to get sandbox instance for project {self.project_id}")
                self.status = "error"
                return False
            
            # Initialize file manager with the same sandbox
            self.file_manager = FileManager(
                self.sandbox,
                file_watch_callback=file_watch_callback
            )
            
            # Initialize the file manager
            await self.file_manager.initialize()
            
            self.status = "ready"
            logger.info(f"Project {self.project_id} initialized successfully")
            return True
            
        except Exception as e:
            self.status = "error"
            logger.error(f"Failed to initialize project {self.project_id}: {str(e)}")
            return False
            
    async def disconnect(self):
        """Called when the client disconnects from the project"""
        if self.is_closing:
            return
            
        self.is_closing = True
        
        try:
            logger.info(f"Disconnecting project {self.project_id}")
            self.status = "disconnecting"
            
            # Close all terminals
            if self.terminal_manager:
                await self.terminal_manager.close_all_terminals()
                self.terminal_manager = None
                
            # Close all file watchers
            if self.file_manager:
                await self.file_manager.close_watchers()
                self.file_manager = None
                
            # Close the sandbox if it exists
            if self.sandbox:
                try:
                    await self.sandbox.kill()
                except Exception as e:
                    logger.error(f"Error closing sandbox for project {self.project_id}: {str(e)}")
                self.sandbox = None
                
            self.status = "disconnected"
            logger.info(f"Project {self.project_id} disconnected successfully")
            
        except Exception as e:
            self.status = "error"
            logger.error(f"Error disconnecting project {self.project_id}: {str(e)}")
        
    def update_activity(self):
        """Update the last activity timestamp"""
        self.last_activity = time.time()
    
    def get_project_details(self):
        """Get project details for monitoring"""
        return {
            "project_id": self.project_id,
            "type": self.type,
            "status": self.status,
            "created_at": self.created_at,
            "last_activity": self.last_activity,
            "uptime": time.time() - self.created_at,
            "active_terminals": list(self.active_terminals),
            "terminal_count": len(self.active_terminals),
            "project_dir": self.file_manager.project_dir if self.file_manager else DEFAULT_PROJECT_DIR
        }
        
    def handlers(self, connection):
        """Create event handlers for socket connections"""
        
        # Define all the handler functions
        async def handle_heartbeat(_):
            self.update_activity()
            return {"success": True, "timestamp": time.time()}
            
        async def handle_get_file(args):
            self.update_activity()
            file_path = args.get('path')
            if not file_path:
                return {"error": "File path is required"}
                
            if self.file_manager:
                try:
                    file_data = await self.file_manager.get_file(file_path)
                    return {"success": True, "file": file_data}
                except Exception as e:
                    logger.error(f"Error getting file {file_path}: {str(e)}")
                    return {"error": f"Failed to get file: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_get_folder(args):
            self.update_activity()
            folder_path = args.get('path')
            if not folder_path:
                return {"error": "Folder path is required"}
                
            if self.file_manager:
                try:
                    folder_data = await self.file_manager.get_folder(folder_path)
                    return {"success": True, "folder": folder_data}
                except Exception as e:
                    logger.error(f"Error getting folder {folder_path}: {str(e)}")
                    return {"error": f"Failed to get folder: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_save_file(args):
            self.update_activity()
            file_path = args.get('path')
            content = args.get('content')
            
            if not file_path:
                return {"error": "File path is required"}
                
            if self.file_manager:
                try:
                    await self.file_manager.save_file(file_path, content)
                    return {"success": True, "path": file_path}
                except Exception as e:
                    logger.error(f"Error saving file {file_path}: {str(e)}")
                    return {"error": f"Failed to save file: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_create_file(args):
            self.update_activity()
            parent_path = args.get('parentPath')
            name = args.get('name')
            
            if not parent_path or not name:
                return {"error": "Parent path and file name are required"}
                
            if self.file_manager:
                try:
                    result = await self.file_manager.create_file(parent_path, name)
                    return {"success": True, "file": result}
                except Exception as e:
                    logger.error(f"Error creating file {name} in {parent_path}: {str(e)}")
                    return {"error": f"Failed to create file: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_create_folder(args):
            self.update_activity()
            parent_path = args.get('parentPath')
            name = args.get('name')
            
            if not parent_path or not name:
                return {"error": "Parent path and folder name are required"}
                
            if self.file_manager:
                try:
                    result = await self.file_manager.create_folder(parent_path, name)
                    return {"success": True, "folder": result}
                except Exception as e:
                    logger.error(f"Error creating folder {name} in {parent_path}: {str(e)}")
                    return {"error": f"Failed to create folder: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_rename_file(args):
            self.update_activity()
            path = args.get('path')
            new_name = args.get('newName')
            
            if not path or not new_name:
                return {"error": "File path and new name are required"}
                
            if self.file_manager:
                try:
                    result = await self.file_manager.rename_file(path, new_name)
                    return {"success": True, "file": result}
                except Exception as e:
                    logger.error(f"Error renaming file {path} to {new_name}: {str(e)}")
                    return {"error": f"Failed to rename file: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_delete_file(args):
            self.update_activity()
            path = args.get('path')
            
            if not path:
                return {"error": "File path is required"}
                
            if self.file_manager:
                try:
                    await self.file_manager.delete_file(path)
                    return {"success": True, "path": path}
                except Exception as e:
                    logger.error(f"Error deleting file {path}: {str(e)}")
                    return {"error": f"Failed to delete file: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_delete_folder(args):
            self.update_activity()
            path = args.get('path')
            
            if not path:
                return {"error": "Folder path is required"}
                
            if self.file_manager:
                try:
                    await self.file_manager.delete_folder(path)
                    return {"success": True, "path": path}
                except Exception as e:
                    logger.error(f"Error deleting folder {path}: {str(e)}")
                    return {"error": f"Failed to delete folder: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_create_terminal(args):
            self.update_activity()
            terminal_id = args.get('id')
            
            # Check if we've hit the terminal limit
            if len(self.active_terminals) >= MAX_TERMINALS:
                return {"error": f"Maximum number of terminals ({MAX_TERMINALS}) reached"}
                
            # Generate a terminal ID if not provided
            if not terminal_id:
                terminal_id = f"term_{int(time.time())}_{len(self.active_terminals)}"
                
            async def on_data(response_string):
                # Emit terminal response through socket
                await connection['socket'].emit('terminalResponse', {
                    'id': terminal_id,
                    'data': response_string
                })
                
                # Check for port numbers in the response
                port = extract_port_number(response_string)
                if port and self.sandbox:
                    try:
                        host = await self.sandbox.process.get_hostname(port)
                        if host:
                            await connection['socket'].emit('previewURL', {
                                'id': terminal_id,
                                'url': f"https://{host}"
                            })
                    except Exception as e:
                        logger.error(f"Error getting hostname for port {port}: {str(e)}")
                    
            async def _create_terminal():
                if self.terminal_manager:
                    try:
                        # Get the current directory from file_manager or use default
                        default_dir = self.file_manager.project_dir if self.file_manager else DEFAULT_PROJECT_DIR
                        
                        # Create the terminal
                        await self.terminal_manager.create_terminal(
                            id=terminal_id, 
                            on_data=on_data,
                            default_directory=default_dir
                        )
                        
                        # Add to active terminals
                        self.active_terminals.add(terminal_id)
                        return {"success": True, "id": terminal_id}
                    except Exception as e:
                        logger.error(f"Error creating terminal {terminal_id}: {str(e)}")
                        return {"error": f"Failed to create terminal: {str(e)}"}
                return {"error": "Terminal manager not initialized"}
                    
            return await lock_manager.acquire_lock(f"{self.project_id}terminal{terminal_id}", _create_terminal)
            
        async def handle_resize_terminal(args):
            self.update_activity()
            terminal_id = args.get('id')
            dimensions = args.get('dimensions', {})
            
            if not terminal_id:
                return {"error": "Terminal ID is required"}
                
            if terminal_id not in self.active_terminals:
                return {"error": f"Terminal {terminal_id} not found"}
                
            if self.terminal_manager:
                try:
                    await self.terminal_manager.resize_terminal(terminal_id, dimensions)
                    return {"success": True, "id": terminal_id}
                except Exception as e:
                    logger.error(f"Error resizing terminal {terminal_id}: {str(e)}")
                    return {"error": f"Failed to resize terminal: {str(e)}"}
            return {"error": "Terminal manager not initialized"}
                
        async def handle_terminal_data(args):
            self.update_activity()
            terminal_id = args.get('id')
            data = args.get('data')
            
            if not terminal_id or data is None:
                return {"error": "Terminal ID and data are required"}
                
            if terminal_id not in self.active_terminals:
                return {"error": f"Terminal {terminal_id} not found"}
                
            if self.terminal_manager:
                try:
                    await self.terminal_manager.send_terminal_data(terminal_id, data)
                    return {"success": True, "id": terminal_id}
                except Exception as e:
                    logger.error(f"Error sending data to terminal {terminal_id}: {str(e)}")
                    return {"error": f"Failed to send terminal data: {str(e)}"}
            return {"error": "Terminal manager not initialized"}
                
        async def handle_close_terminal(args):
            self.update_activity()
            terminal_id = args.get('id')
            
            if not terminal_id:
                return {"error": "Terminal ID is required"}
                
            if terminal_id not in self.active_terminals:
                return {"error": f"Terminal {terminal_id} not found or already closed"}
                
            if self.terminal_manager:
                try:
                    await self.terminal_manager.close_terminal(terminal_id)
                    self.active_terminals.remove(terminal_id)
                    return {"success": True, "id": terminal_id}
                except Exception as e:
                    logger.error(f"Error closing terminal {terminal_id}: {str(e)}")
                    return {"error": f"Failed to close terminal: {str(e)}"}
            return {"error": "Terminal manager not initialized"}
                
        async def handle_move_file(args):
            self.update_activity()
            source_path = args.get('sourcePath')
            target_path = args.get('targetPath')
            
            if not source_path or not target_path:
                return {"error": "Source and target paths are required"}
                
            if self.file_manager:
                try:
                    await self.file_manager.move_file(source_path, target_path)
                    return {"success": True, "sourcePath": source_path, "targetPath": target_path}
                except Exception as e:
                    logger.error(f"Error moving file from {source_path} to {target_path}: {str(e)}")
                    return {"error": f"Failed to move file: {str(e)}"}
            return {"error": "File manager not initialized"}
            
        async def handle_run_command(args):
            self.update_activity()
            command = args.get('command')
            terminal_id = args.get('terminalId')
            cwd = args.get('cwd')
            
            if not command:
                return {"error": "Command is required"}
                
            # Use existing terminal or create a new one
            if not terminal_id or terminal_id not in self.active_terminals:
                try:
                    # Create a new terminal
                    result = await handle_create_terminal({"id": terminal_id})
                    if "error" in result:
                        return result
                    terminal_id = result["id"]
                except Exception as e:
                    logger.error(f"Error creating terminal for command: {str(e)}")
                    return {"error": f"Failed to create terminal: {str(e)}"}
            
            # Change directory if specified
            if cwd and self.terminal_manager:
                try:
                    await self.terminal_manager.send_terminal_data(terminal_id, f"cd {cwd}\r")
                    # Give it a moment to change directory
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logger.error(f"Error changing directory: {str(e)}")
            
            # Run the command
            try:
                await self.terminal_manager.send_terminal_data(terminal_id, f"{command}\r")
                return {"success": True, "id": terminal_id, "command": command}
            except Exception as e:
                logger.error(f"Error running command {command}: {str(e)}")
                return {"error": f"Failed to run command: {str(e)}"}
            
        async def handle_stop_command(args):
            self.update_activity()
            terminal_id = args.get('terminalId')
            
            if not terminal_id or terminal_id not in self.active_terminals:
                return {"error": "Valid terminal ID is required"}
                
            # Send Ctrl+C to the terminal
            try:
                await self.terminal_manager.send_terminal_data(terminal_id, "\x03")
                return {"success": True, "id": terminal_id}
            except Exception as e:
                logger.error(f"Error stopping command in terminal {terminal_id}: {str(e)}")
                return {"error": f"Failed to stop command: {str(e)}"}
                
        async def handle_get_project_status(_):
            self.update_activity()
            return {"success": True, "status": self.get_project_details()}
            
        # Create a dictionary of all handlers
        return {
            'heartbeat': handle_heartbeat,
            'getFile': handle_get_file,
            'getFolder': handle_get_folder,
            'saveFile': handle_save_file,
            'createFile': handle_create_file,
            'createFolder': handle_create_folder,
            'renameFile': handle_rename_file,
            'deleteFile': handle_delete_file,
            'deleteFolder': handle_delete_folder,
            'createTerminal': handle_create_terminal,
            'resizeTerminal': handle_resize_terminal,
            'terminalData': handle_terminal_data,
            'closeTerminal': handle_close_terminal,
            'moveFile': handle_move_file,
            'runCommand': handle_run_command,
            'stopCommand': handle_stop_command,
            'getProjectStatus': handle_get_project_status,
        }